Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding 

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000 
viii. Tip = foreign key: business_id = 3979: foreign key: user_id = 537
ix. User = 10000 
x. Friend = 11 
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "No"
	
	
	SQL code used to arrive at answer:
	
	SELECT *
	FROM user
	WHERE id IS NULL OR
    		name IS NULL OR
    		review_count IS NULL OR
    		yelping_since IS NULL OR
    		useful IS NULL OR
    		funny IS NULL OR
    		cool IS NULL OR
    		fans IS NULL OR
    		average_stars IS NULL OR
    		compliment_hot IS NULL OR
    		compliment_more IS NULL OR
    		compliment_profile IS NULL OR
    		compliment_cute IS NULL OR
    		compliment_list IS NULL OR
    		compliment_note IS NULL OR
    		compliment_plain IS NULL OR
    		compliment_cool IS NULL OR
    		compliment_funny IS NULL OR
    		compliment_writer IS NULL OR
    		compliment_photos IS NULL
	LIMIT 10;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:	3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg:	3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:	24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city,
		SUM(review_count) AS review_count
	FROM business
	GROUP BY city
	ORDER BY review_count DESC;
	
	Copy and Paste the Result Below:
	
	+-----------------+--------------+
	| city            | review_count |
	+-----------------+--------------+
	| Las Vegas       |        82854 |
	| Phoenix         |        34503 |
	| Toronto         |        24113 |
	| Scottsdale      |        20614 |
	| Charlotte       |        12523 |
	| Henderson       |        10871 |
	| Tempe           |        10504 |
	| Pittsburgh      |         9798 |
	| Montréal        |         9448 |
	| Chandler        |         8112 |
	| Mesa            |         6875 |
	| Gilbert         |         6380 |
	| Cleveland       |         5593 |
	| Madison         |         5265 |
	| Glendale        |         4406 |
	| Mississauga     |         3814 |
	| Edinburgh       |         2792 |
	| Peoria          |         2624 |
	| North Las Vegas |         2438 |
	| Markham         |         2352 |
	| Champaign       |         2029 |
	| Stuttgart       |         1849 |
	| Surprise        |         1520 |
	| Lakewood        |         1465 |
	| Goodyear        |         1155 |
	+-----------------+--------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities: 

i. Avon

SQL code used to arrive at answer:

--Avon
SELECT stars,
	COUNT(stars) AS count 
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

Avon
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:

--Beachwood
SELECT stars,
	COUNT(stars) AS count 
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT id, 
		name,
		review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
	
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	The basic descriptive data shows no strong correlation between reviews and fans. The table below shows that the user with the most number of fans
	doesn't have that many review posts.
	+------------------------+-----------+--------------+------+
	| id                     | name      | review_count | fans |
	+------------------------+-----------+--------------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
	| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
	| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 |
	| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 |
	| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
	| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
	| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 |
	| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 |
	| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
	| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 |
	| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 |
	| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 |
	| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
	| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 |
	+------------------------+-----------+--------------+------+
	(Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	There are more reviews with the word 'love' than with the word 'hate'.
	
	SQL code used to arrive at answer:
	
	-- the number of reviews with the word 'love': 1780
	
	SELECT COUNT(*) AS total_reviews
	FROM review
	WHERE text LIKE '%love%';

	-- the number of reviews with the word 'hate': 232
	
	SELECT COUNT(*) AS total_reviews
	FROM review
	WHERE text LIKE '%hate%';

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT id, 
		name,
		fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;

	
	Copy and Paste the Result Below:
	
	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I pick the food category businesses for analysis.

SELECT name,
	city,
	category,
	ROUND(AVG(review_count),2) AS avg_reviews,
	COUNT(DISTINCT hours) AS open_days,
	CASE
		WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
		WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
		ELSE '1~2 star'
	END stars_group,
	latitude,
	longitude,
	postal_code,
	address
FROM hours h
	LEFT JOIN business b ON b.id = h.business_id
	LEFT JOIN category c ON h.business_id = c.business_id
WHERE stars_group IN('2~3 star', '4~5 star') AND
	category LIKE '%Food%'
GROUP BY name;

	
i. Do the two groups you chose to analyze have a different distribution of hours?

--Average of open days of different group
+-------------+---------------+
| stars_group | avg_open_days |
+-------------+---------------+
| 2~3 star    |          6.83 |
| 4~5 star    |          6.58 |
+-------------+---------------+


--distribution of open hours
+-------------+-----------+-------+
| stars_group | open_day  | count |
+-------------+-----------+-------+
| 2~3 star    | Friday    |     6 |
| 2~3 star    | Monday    |     6 |
| 2~3 star    | Saturday  |     6 |
| 2~3 star    | Sunday    |     5 |
| 2~3 star    | Thursday  |     6 |
| 2~3 star    | Tuesday   |     6 |
| 2~3 star    | Wednesday |     6 |
| 4~5 star    | Friday    |    19 |
| 4~5 star    | Monday    |    18 |
| 4~5 star    | Saturday  |    19 |
| 4~5 star    | Sunday    |    17 |
| 4~5 star    | Thursday  |    15 |
| 4~5 star    | Tuesday   |    14 |
| 4~5 star    | Wednesday |    19 |
+-------------+-----------+-------+



In all categories related to food, businesses rated 2~3 stars have slightly more average opening days than those rated 4~5 stars.


SQL Code:

-- the category related to food

SELECT stars_group,
	AVG(open_days) AS avg_open_days
FROM   (
	SELECT name,
		--city,
		--category,
		--ROUND(AVG(review_count),2) AS avg_reviews,
		COUNT(DISTINCT hours) AS open_days,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		--latitude,
		--longitude,
		--postal_code,
		--address
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	)
GROUP BY stars_group;


-- see the distribute of open days

SELECT stars_group,
	open_day,
	COUNT(open_day) AS count
FROM   (
	SELECT name,
	--city,
	--category,
	--ROUND(AVG(review_count),2) AS avg_reviews,
	hours,
	--COUNT(DISTINCT hours) AS open_days,
	CASE
		WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
		WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
		ELSE '1~2 star'
	END stars_group,
	CASE
		WHEN hours LIKE 'Friday%' THEN 'Friday'
		WHEN hours LIKE 'Tuesday%' THEN 'Tuesday'
		WHEN hours LIKE 'Saturday%' THEN 'Saturday'
		WHEN hours LIKE 'Sunday%' THEN 'Sunday'
		WHEN hours LIKE 'Thursday%' THEN 'Thursday'
		WHEN hours LIKE 'Monday%' THEN 'Monday'
		ELSE 'Wednesday'
	END open_day
	--latitude,
	--longitude,
	--postal_code,
	--address
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	)
GROUP BY open_day, stars_group
ORDER BY stars_group


ii. Do the two groups you chose to analyze have a different number of reviews?
	
+-------------+-------------+
| stars_group | avg_reviews |
+-------------+-------------+
| 2~3 star    |        14.5 |
| 4~5 star    |      133.83 |
+-------------+-------------+

In all categories related to food, businesses rated 4~5 stars have more reviews than those rated 2-3 stars

SQL Code:

SELECT stars_group,
	AVG(avg_reviews) AS avg_reviews
FROM(
	SELECT name,
		--city,
		--category,
		ROUND(AVG(review_count),2) AS avg_reviews,
		--COUNT(DISTINCT hours) AS open_days,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		--latitude,
		--longitude,
		--postal_code,
		--address
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	)
GROUP BY stars_group;
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

I realize that those businesses rated 4~5 stars will be close to each other.
However, businesses rated 2~3 stars are far from each other.
Interestingly, business rated 2~3 stars are closer to business rated 4~5 stars.


SQL code used for analysis:
/* 
In the same city, how far or near are businesses rated 2~3 stars and those rated 4~5 stars
*/ 

SELECT A.postal_code AS postal_code_l,
	B.postal_code AS postal_code_h,
	A.city
FROM(
	SELECT name,
		city,
		postal_code,
		address,
		category,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	ORDER BY stars, city
	) A,
	(
	SELECT name,
		city,
		postal_code,
		address,
		category,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	ORDER BY stars, city
	) B
WHERE A.city = B.city AND
	A.stars_group <> B.stars_group AND
	A.stars_group = '2~3 star'
	
ORDER BY A.city;

/*
In the same city, how near are businesses rated the same stars.
*/


SELECT A.postal_code AS postal_code_1,
	B.postal_code AS postal_code_2,
	A.city,
	A.address,
	B.address,
	A.stars_group
FROM(
	SELECT name,
		city,
		postal_code,
		address,
		category,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	ORDER BY stars, city
	) A,
	(
	SELECT name,
		city,
		postal_code,
		address,
		category,
		CASE
			WHEN stars >= 2 AND stars <= 3 THEN '2~3 star'
			WHEN stars >=4 AND stars <= 5 THEN '4~5 star'
			ELSE '1~2 star'
		END stars_group
		
	FROM hours h
		LEFT JOIN business b ON b.id = h.business_id
		LEFT JOIN category c ON h.business_id = c.business_id
	WHERE stars_group IN('2~3 star', '4~5 star') AND
		category LIKE '%Food%'
	GROUP BY name
	ORDER BY stars, city
	) B
WHERE A.city = B.city AND
	A.stars_group = B.stars_group AND
	postal_code_1 <> postal_code_2
	
ORDER BY A.city;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
	
	reviews:
	
	Total reviews of businesses that are open and that are closed are 8480 and 1520 representatively.
	
         
ii. Difference 2:
         
	star rating:

	The average star rating of businesses that are open and that are closed are 3.68 and 3.52 representatively.
         
         
SQL code used for analysis:

SELECT is_open,
	COUNT(review_count) AS reviews,
	ROUND(AVG(stars), 2) AS avg_rating

FROM business
GROUP BY is_open

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

	1. clustering business categories by reviews to find commonalities or differences. 

	2. the relation between attributes and stars rating
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	
	1. clustering business categories by reviews to find commonalities or differences.
		business table: whole business list
		review table: for the review text
		category table: for clustering businesses

	2. the relation between attributes and stars rating
		business table: whole business list
		attribute table: for the attribute value
                           
iii. Output of your finished dataset:
	1. clustering business categories by reviews to find commonalities or differences.
	+------------------------+-----------------------------------+-------+--------------+----------+-------+
	| id                     | name                              | stars | review_count | category | text |
	+------------------------+-----------------------------------+-------+--------------+----------+------+
	| --6MefnULPED_I942VcFNA | John's Chinese BBQ Restaurant     |   3.0 |           30 |     None | None |
	| --7zmmkVg-IMGaXbuVd0SQ | Primal Brewery                    |   4.0 |           42 |     None | None |
	| --8LPVSo5i0Oo61X01sV9A | Valley Bone and Joint Specialists |   4.5 |            3 |     None | None |
	| --9e1ONYQuAa-CB_Rrw7Tw | Delmonico Steakhouse              |   4.0 |         1389 |     None | My favorite steakhouse ...ago and I have never been disappointed once. |
	|                        |                                   |       |              |          |      |
	|                        |                                   |       |              |          | One of my favorite things about...me is close to this one. |
	
	(Output limit exceeded, 25 of 10669 total rows shown)


	
	2. the relation between attributes and stars rating
	+------------------------+--------------------------+-----------------+----------------------------+-------------------------------------------------------------------------------------+
	| business_id            | business_name            | business_rating | attribute_name             | value                                                                               |
	+------------------------+--------------------------+-----------------+----------------------------+-------------------------------------------------------------------------------------+
	| 2eJEUJIP54tex7T9YOcLSw | Back-Health Chiropractic |             5.0 | AcceptsInsurance           | 1                                                                                   |
	| 2eJEUJIP54tex7T9YOcLSw | Back-Health Chiropractic |             5.0 | ByAppointmentOnly          | 1                                                                                   |
	| 2eJEUJIP54tex7T9YOcLSw | Back-Health Chiropractic |             5.0 | BusinessAcceptsCreditCards | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | BusinessParking            | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false} |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | Caters                     | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | WiFi                       | free                                                                                |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | OutdoorSeating             | 0                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | BusinessAcceptsCreditCards | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | RestaurantsPriceRange2     | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | BikeParking                | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | RestaurantsDelivery        | 0                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | RestaurantsTakeOut         | 1                                                                                   |
	| 1cLXGXThDYZ5WK_KpBLtkw | Koko Bakery              |             4.0 | WheelchairAccessible       | 1                                                                                   |
	| -PtTGvWsckUL8tTutHr6Ew | Snip-its Rocky River     |             2.5 | BusinessAcceptsCreditCards | 1                                                                                   |
	| -PtTGvWsckUL8tTutHr6Ew | Snip-its Rocky River     |             2.5 | RestaurantsPriceRange2     | 3                                                                                   |
	| -PtTGvWsckUL8tTutHr6Ew | Snip-its Rocky River     |             2.5 | GoodForKids                | 1                                                                                   |
	| -PtTGvWsckUL8tTutHr6Ew | Snip-its Rocky River     |             2.5 | BusinessParking            | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false} |
	| -PtTGvWsckUL8tTutHr6Ew | Snip-its Rocky River     |             2.5 | ByAppointmentOnly          | 0                                                                                   |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | BusinessParking            | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false} |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | HasTV                      | 1                                                                                   |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | CoatCheck                  | 0                                                                                   |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | NoiseLevel                 | average                                                                             |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | OutdoorSeating             | 1                                                                                   |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | BusinessAcceptsCreditCards | 1                                                                                   |
	| 1AxEmgv8Dsr3iU9Aa40jPw | Nabers Music, Bar & Eats |             4.0 | RestaurantsPriceRange2     | 2                                                                                   |
	+------------------------+--------------------------+-----------------+----------------------------+-------------------------------------------------------------------------------------+
	(Output limit exceeded, 25 of 787 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:
	1. clustering business categories by reviews to find commonalities or differences

	SELECT b.id,
    		name,
    		b.stars,
    		review_count,
    		category,
    		text
	FROM business b
    		LEFT JOIN category c ON b.id = c.business_id
    		LEFT JOIN review r ON b.id = r.business_id

	2. the relation between attributes and stars rating

	SELECT a.business_id,
    		b.name AS business_name,
    		stars AS business_rating,
    		a.name AS attribute_name,
    		value
	FROM attribute a
    		LEFT JOIN business b ON b.id = a.business_id
	WHERE b.name is not null;




